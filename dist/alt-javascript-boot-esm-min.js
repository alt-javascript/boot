import{ValueResolvingConfig,ConfigFactory,EphemeralConfig}from"@alt-javascript/config/index-browser.js";import{LoggerCategoryCache,LoggerFactory,ConfigurableLogger,CachingLoggerFactory}from"@alt-javascript/logger";class Boot{static getGlobalRef(){let $globalref=null;return $globalref=Boot.detectBrowser()?window:global,$globalref}static getGlobalRoot(key){const $globalref=Boot.getGlobalRef();let $key=$globalref&&$globalref.boot;return $key=$key&&$key.contexts,$key=$key&&$key.root,$key=$key&&$key[`${key}`],$key}static detectBrowser(){return!("undefined"==typeof window)}static detectConfig(context){const configArg=context&&context.config;let $config=null;"undefined"!=typeof config&&($config=config);const browser=Boot.detectBrowser();if(browser&&window?.config&&($config=window.config),$config=configArg||$config,!$config)throw new Error("Unable to detect config, is 'config' declared or provided?");return $config instanceof ValueResolvingConfig||"ValueResolvingConfig"===$config.constructor?.name||($config=browser?ConfigFactory.getConfig(new EphemeralConfig($config)):ConfigFactory.getConfig($config)),$config}static boot(context){const loggerFactoryArg=context&&context.loggerFactory,loggerCategoryCacheArg=context&&context.loggerFactory,fetchArg=context&&context.fetch,browser=!("undefined"==typeof window);let $config=Boot.detectConfig(context),$loggerCategoryCache=null;void 0!==loggerCategoryCacheArg&&($loggerCategoryCache=loggerCategoryCacheArg),browser&&window?.loggerCategoryCache&&($config=window.loggerCategoryCache),$loggerCategoryCache=$loggerCategoryCache||loggerCategoryCacheArg||new LoggerCategoryCache;let $loggerFactory=null;"undefined"!=typeof loggerFactory&&($loggerFactory=loggerFactory),$loggerFactory=$loggerFactory||loggerFactoryArg||new LoggerFactory($config,$loggerCategoryCache,ConfigurableLogger.DEFAULT_CONFIG_PATH);let $fetch=null;"undefined"!=typeof fetch&&($fetch=fetch),$fetch=$fetch||fetchArg;const $globalref=Boot.getGlobalRef();$globalref.boot={contexts:{root:{config:$config}}},$globalref.boot.contexts.root.loggerCategoryCache=$loggerCategoryCache,$globalref.boot.contexts.root.loggerFactory=$loggerFactory,$globalref.boot.contexts.root.fetch=$fetch}static test(context){const $config=Boot.detectConfig(context),loggerCategoryCache=new LoggerCategoryCache,cachingLoggerFactory=new CachingLoggerFactory($config,loggerCategoryCache);$config.get("logging.test.fixtures.quiet",!0)?Boot.boot({config:$config,loggerFactory:cachingLoggerFactory,loggerCategoryCache:loggerCategoryCache}):Boot.boot({config:$config})}static root(name,defaultValue){return Boot.getGlobalRoot(name)||defaultValue}}class Application{static async run(optionsArg){const options=optionsArg;Boot.root("config")||Boot.boot(options);const ApplicationContext=await import("@alt-javascript/cdi/ApplicationContext");options.config=options?.config||Boot.root("config");let applicationContext=options?.applicationContext||options;return"ApplicationContext"!==applicationContext.constructor.name&&(applicationContext=new ApplicationContext(options)),applicationContext.lifeCycle(),applicationContext}}const{boot:boot}=Boot,{root:root}=Boot,{test:test}=Boot;export{Application,Boot,boot,root,test};